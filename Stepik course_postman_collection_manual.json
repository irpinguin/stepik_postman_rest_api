{
	"info": {
		"_postman_id": "e0c3c1e1-0725-40c9-b257-3d435b783e0e",
		"name": "Stepik course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25897606"
	},
	"item": [
		{
			"name": "companies",
			"item": [
				{
					"name": "PM-1.CompaniesDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"//     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"// });\r",
									"\r",
									"// pm.test(\"Successful GET request\", function () {\r",
									"//     pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"// console.log(DataJson);\r",
									"// pm.test(\"Len of JSON with default limit\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;     // считать количество ключей внутри JSON\r",
									"//     pm.expect(countLenData).to.eql(3);\r",
									"// });\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;    // количество элементов массива\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": [
						{
							"name": "CompaniesDefaultRequest",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 05:52:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 05:52:12 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=QFYYL6rmfOwICtpZY5TuVeAnaD%2F8Lf4Esf1ymlnkO8OKnUwGwHigL0VBmrVW7JPe1UmUXbpMXNQfEO5tIYy%2BlSfd5DeK2n36Bqw8XZk40Kui83PSqKdY6ERtCkSKdoc8HCg%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f66ee2ede08d96f-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 1,\n            \"company_name\": \"Tesla\",\n            \"company_address\": \"Nicholastown, IL 80126\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 2,\n            \"company_name\": \"Google\",\n            \"company_address\": \"1093 Cooke Harbor Apt. 908\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 3,\n            \"company_name\": \"Toyota\",\n            \"company_address\": \"Davidberg, MN 88952\",\n            \"company_status\": \"ACTIVE\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 3,\n        \"offset\": 0,\n        \"total\": 7\n    }\n}"
						}
					]
				},
				{
					"name": "PM-2.CompaniesWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"\r",
									"pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.be.oneOf(['https://send-request.me/api/companies', 'https://send-request.me/api/companies/']);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://send-request.me/api/companies",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"companies"
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithoutSSL",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://send-request.me/api/companies/",
									"protocol": "http",
									"host": [
										"send-request",
										"me"
									],
									"path": [
										"api",
										"companies",
										""
									]
								}
							},
							"status": "Moved Permanently",
							"code": 301,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 05:52:26 GMT"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=3600"
								},
								{
									"key": "Expires",
									"value": "Mon, 14 Aug 2023 06:52:26 GMT"
								},
								{
									"key": "Location",
									"value": "https://send-request.me/api/companies/"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=KqzFOhcpIWUxDITXu17r%2FpjTqwLGM7i1XrgA3%2FPWOULD324GCFMA2I7A58oF3ozs8Y3kh%2BnlHuxjMEym%2FUSq%2BMyDgSEySvd0irr8njzi84ksnVUFKgYsP5%2BnPI9Riy8ms%2FE%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f66ee8368bed93f-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "PM-3.CompaniesWithLimitAndOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with limit=5\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=5&offset=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithLimitAndOffset",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?limit=5&offset=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "offset",
											"value": "2"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 05:54:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 05:54:29 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YjhKbGsVN21R6TCOhYTF4t5JbhJqptWsDi6KDs11oNtq16qE2xZaYAdNu3T5CCMF4OtNqQxtXXgEsYi%2FFUwWRod2orQpoqgnXEJuY0gwbvmu%2BGDjmdS2uR54PM4OInMeT2A%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f66f1830cf5d96f-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 3,\n            \"company_name\": \"Toyota\",\n            \"company_address\": \"Davidberg, MN 88952\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 4,\n            \"company_name\": \"Nord\",\n            \"company_address\": \"3287 Denise Mountain Apt. 963\",\n            \"company_status\": \"BANKRUPT\"\n        },\n        {\n            \"company_id\": 5,\n            \"company_name\": \"Apple\",\n            \"company_address\": \"Patrickchester, FL 93690\",\n            \"company_status\": \"CLOSED\"\n        },\n        {\n            \"company_id\": 6,\n            \"company_name\": \"BitcoinCorp\",\n            \"company_address\": \"85958 Cindy Wall\",\n            \"company_status\": \"CLOSED\"\n        },\n        {\n            \"company_id\": 7,\n            \"company_name\": \"Xiaomi\",\n            \"company_address\": \"Port Valeriefurt, HI 15914\",\n            \"company_status\": \"BANKRUPT\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 5,\n        \"offset\": 2,\n        \"total\": 7\n    }\n}"
						}
					]
				},
				{
					"name": "PM-4.CompaniesWithStatusActive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"ACTIVE\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ACTIVE&limit=7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "7"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithActive",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?status=ACTIVE&limit=7",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "status",
											"value": "ACTIVE"
										},
										{
											"key": "limit",
											"value": "7"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 05:54:38 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 05:54:38 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=AXbQIoG4gEF%2BRFdXIL7yWy946CIvWoBKOOAE%2FgT%2F88PQ0RFFNFA%2B6VSfvTL%2BH8KlilLkW5whuGUX3ywSl%2BEzKZu4Mnsucv%2Fu83zkgqdeoKr%2FfwU6bbEXTwgUs0K1BYQKWP4%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f66f1bbc807d96f-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 1,\n            \"company_name\": \"Tesla\",\n            \"company_address\": \"Nicholastown, IL 80126\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 2,\n            \"company_name\": \"Google\",\n            \"company_address\": \"1093 Cooke Harbor Apt. 908\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 3,\n            \"company_name\": \"Toyota\",\n            \"company_address\": \"Davidberg, MN 88952\",\n            \"company_status\": \"ACTIVE\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 7,\n        \"offset\": 0,\n        \"total\": 3\n    }\n}"
						}
					]
				},
				{
					"name": "PM-5.CompaniesWithStatusClosed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"CLOSED\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=CLOSED&limit=7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								},
								{
									"key": "limit",
									"value": "7"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithStatusClosed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?status=CLOSED&limit=7",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "status",
											"value": "CLOSED"
										},
										{
											"key": "limit",
											"value": "7"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 06:07:23 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 06:07:23 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=x0l8kISFYyrCs0q1qMO1U4p4jnY7NMIRkWDF0fpsuLCbE5xs%2Fgodyj%2FzJohHWY6zQZDdNio9SOrWrq86Att4w1GFtrmwYkxsUIU5JPPa3FhHpcVAaKDgBqYMAAqVz1u7v3o%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f67046b9f944c82-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 5,\n            \"company_name\": \"Apple\",\n            \"company_address\": \"Patrickchester, FL 93690\",\n            \"company_status\": \"CLOSED\"\n        },\n        {\n            \"company_id\": 6,\n            \"company_name\": \"BitcoinCorp\",\n            \"company_address\": \"85958 Cindy Wall\",\n            \"company_status\": \"CLOSED\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 7,\n        \"offset\": 0,\n        \"total\": 2\n    }\n}"
						}
					]
				},
				{
					"name": "PM-6.CompaniesWithStatusBankrupt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"BANKRUPT\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=BANKRUPT&limit=7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "BANKRUPT"
								},
								{
									"key": "limit",
									"value": "7"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithStatusBankrupt",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?status=BANKRUPT&limit=7",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "status",
											"value": "BANKRUPT"
										},
										{
											"key": "limit",
											"value": "7"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 06:21:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 06:21:29 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tDd7S5ogKEvaa2rNb%2BNUgolDbWcK2I6zQZimJzZXt5SqrI5d0G463LpZGa8qD7DDw8%2FLO4CsOCYpwqeA8qt4sHaVVwVfvwyvyUzJWRXLGHTq542Zomi%2B5TZX7i%2B8MgsF6XM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f67190f8958d999-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 4,\n            \"company_name\": \"Nord\",\n            \"company_address\": \"3287 Denise Mountain Apt. 963\",\n            \"company_status\": \"BANKRUPT\"\n        },\n        {\n            \"company_id\": 7,\n            \"company_name\": \"Xiaomi\",\n            \"company_address\": \"Port Valeriefurt, HI 15914\",\n            \"company_status\": \"BANKRUPT\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 7,\n        \"offset\": 0,\n        \"total\": 2\n    }\n}"
						}
					]
				},
				{
					"name": "PM-7.CompaniesWithInvQueryStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?status=ABC&limit=7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								},
								{
									"key": "limit",
									"value": "7"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithInvQueryStatus",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?status=ABC&limit=7",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "status",
											"value": "ABC"
										},
										{
											"key": "limit",
											"value": "7"
										}
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 06:24:37 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "208"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=I3mDhS4vVF9e3yOZ2HREVTthnYLmdczkE%2FP%2FTC7nw98hvDBfVFhMUSH6SzRY5nQBRD2fWxddOeqWefbXqYUFbnkMaZ8MMd7TzQAfn8LauywT2Rj%2BC6SFVOuZRh9gX4nFlmM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f671dac7df4d999-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"status\"\n            ],\n            \"msg\": \"value is not a valid enumeration member; permitted: 'ACTIVE', 'BANKRUPT', 'CLOSED'\",\n            \"type\": \"type_error.enum\",\n            \"ctx\": {\n                \"enum_values\": [\n                    \"ACTIVE\",\n                    \"BANKRUPT\",\n                    \"CLOSED\"\n                ]\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-8.CompaniesWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithInvQueryLimit",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?limit=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										},
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 06:30:43 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 06:30:43 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Hf2Vqsmy8P0M%2BVVKF4nHMMzXY30P94UDY6H68T2Zn4hm0mPTe5HXoKqyuMs9qtXR9ta7T%2Fef634D9CUYrBg%2FE3ItWKK%2BLwKtde5sqOI29GLgdifhg8hKszn2DvEg%2BGQlDA8%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f67269b6d18d999-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 1,\n            \"company_name\": \"Tesla\",\n            \"company_address\": \"Nicholastown, IL 80126\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 2,\n            \"company_name\": \"Google\",\n            \"company_address\": \"1093 Cooke Harbor Apt. 908\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 3,\n            \"company_name\": \"Toyota\",\n            \"company_address\": \"Davidberg, MN 88952\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 4,\n            \"company_name\": \"Nord\",\n            \"company_address\": \"3287 Denise Mountain Apt. 963\",\n            \"company_status\": \"BANKRUPT\"\n        },\n        {\n            \"company_id\": 5,\n            \"company_name\": \"Apple\",\n            \"company_address\": \"Patrickchester, FL 93690\",\n            \"company_status\": \"CLOSED\"\n        },\n        {\n            \"company_id\": 6,\n            \"company_name\": \"BitcoinCorp\",\n            \"company_address\": \"85958 Cindy Wall\",\n            \"company_status\": \"CLOSED\"\n        },\n        {\n            \"company_id\": 7,\n            \"company_name\": \"Xiaomi\",\n            \"company_address\": \"Port Valeriefurt, HI 15914\",\n            \"company_status\": \"BANKRUPT\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": -1,\n        \"offset\": 0,\n        \"total\": 7\n    }\n}"
						}
					]
				},
				{
					"name": "PM-9.CompaniesWithStrQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?limit=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "ABC"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithStrQueryLimit",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?limit=ABC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "limit",
											"value": "ABC"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 06:39:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "103"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=jizlrfcx7N4Ij1%2BK0OExnlEP5Lmah2gR5oQQqIvdnIZQrYZzFSiH7ixhHKfXGaoYvfgLOO835EZMXnRLiPKeZVFjPouE6oXCpU85Lu0sp7jDxR8J7qUKjwcw12RWwD6Wvrw%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6732ba2ee1d90e-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"limit\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-10.CompaniesWithInvQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with default limit=3\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(1)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?offset=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithInvQueryOffset",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?offset=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 06:41:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 06:41:00 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=7pI%2FGo3tb%2BqWJyk8xjduEdlnqrnWxMuvWRXTfDBTTKZZmgToRQal%2FEoWAJ%2BKhmteMsrPgtl3CMWSnxzDwnMKdROycoBXVwCfzxLvMlO2zfsxseKJpaPxI3P89DG5m6R5RPQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6735aabeecd90e-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 1,\n            \"company_name\": \"Tesla\",\n            \"company_address\": \"Nicholastown, IL 80126\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 2,\n            \"company_name\": \"Google\",\n            \"company_address\": \"1093 Cooke Harbor Apt. 908\",\n            \"company_status\": \"ACTIVE\"\n        },\n        {\n            \"company_id\": 3,\n            \"company_name\": \"Toyota\",\n            \"company_address\": \"Davidberg, MN 88952\",\n            \"company_status\": \"ACTIVE\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 3,\n        \"offset\": -1,\n        \"total\": 7\n    }\n}"
						}
					]
				},
				{
					"name": "PM-11.CompaniesWithStrQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// let DataJson = pm.response.json().data;\r",
									"// pm.test(\"Len of JSON with limit=5\", function() {\r",
									"//     let countLenData = Object.keys(DataJson).length;\r",
									"//     pm.expect(countLenData).to.eql(5);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify offset\", function() {\r",
									"//     pm.expect(DataJson[0].company_id).to.eql(3)\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies?offset=ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies"
							],
							"query": [
								{
									"key": "offset",
									"value": "ABC"
								}
							]
						}
					},
					"response": [
						{
							"name": "CompaniesWithStrQueryOffset",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies?offset=ABC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "ABC"
										}
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 07:03:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "104"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=P7xDFLTio5pToktigEljE7m9BrYR5cKKitop3m%2Fn7J0mi6Amg0cz5%2Bcj02WTA2OOVs11NnB3cUlvtDxrdeYT7tM8ebwUYo7IXt1IDDVlox0nBAVsinY0xa2Og%2Fgn%2F3CoLXM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f675698fd19d92a-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"offset\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-12.CompanyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": { \"type\": \"integer\" },\r",
									"        \"company_name\": {\"type\": \"string\" },\r",
									"        \"company_address\": { \"type\": \"string\" },\r",
									"        \"company_status\": { \r",
									"            \"type\": \"string\", \r",
									"            \"enum\" : [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            },\r",
									"            \"description_lang\": {\r",
									"                \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": { \r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [ \"EN\", \"RU\", \"PL\", \"UA\" ]\r",
									"                    },\r",
									"                    \"translation\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "CompanyById",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 12:26:50 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 12:26:50 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=n%2B0Pub9SjMsmZRgkT7H34prDIrjiPFU7AzLwYA%2FBYAqCxPr%2FxI7MZwufuX3Kkl1pa%2B9ILTnFukyaFqzLzckG23Yxs6snXcrV8pHUqmJZmFRoS01P4z9qT%2FbS8%2B0yopfh0Lc%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6930422869d95f-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"company_id\": 1,\n    \"company_name\": \"Tesla\",\n    \"company_address\": \"Nicholastown, IL 80126\",\n    \"company_status\": \"ACTIVE\",\n    \"description_lang\": [\n        {\n            \"translation_lang\": \"EN\",\n            \"translation\": \"Ye on properly handsome returned throwing am no whatever. In without wishing he of picture no exposed talking minutes. Curiosity continual belonging offending so explained it exquisite. Do remember to followed yourself material mr recurred carriage. High drew west we no or at john. About or given on witty event. Or sociable up material bachelor bringing landlord confined. Busy so many in hung easy find well up. So of exquisite my an explained remainder. Dashwood denoting securing be on perceive my laughing so.\"\n        },\n        {\n            \"translation_lang\": \"RU\",\n            \"translation\": \"Ее сздать ст Спроси сиянье ей верьте се Ум Со Вершит ея. Дав Шум час Наш. Бодрствует бессмертие Их те обворожают от ободряться во изобразить. Со те Ты На не по. Нища горы Свое блат Глас гимн. На Се Но ея За да Ты ах. Уж ни За те. . \\ufeffкто Ея ИЗ До ея.\"\n        },\n        {\n            \"translation_lang\": \"PL\",\n            \"translation\": \"Podkomorzynę powróciłaś tonąc spadku Lombardskiém kutasy dumać. Tonąc trzech kolną tajnym. Rozum żył rosciągnionych licem sądu rosciągnionemi Przysiągłbyś Otoż chowa niepowiedziała Runie Bezładnością Dobre. Podziękować okna nogi ojca Przyjechawszy byle przysunąwszy światłość domy. Pijem mniej gniew znów dziwi ruszy Żyje.\"\n        },\n        {\n            \"translation_lang\": \"UA\",\n            \"translation\": \"Ой у лузі червона калина похилилася. Чогось наша славна Україна зажурилася. А ми тую червону калину піднімемо, А ми нашу славну Україну, гей, гей, розвеселимо! А ми тую червону калину піднімемо, А ми нашу славну Україну, гей, гей, розвеселимо!\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-13.CompanyByNonexId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"8"
							]
						}
					},
					"response": [
						{
							"name": "CompanyById Copy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/companies/8",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies",
										"8"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 15:02:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "404"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=z2T08j5uAb5XeMlV%2FiPRRlEqzy28vPaiTiJv0PEMmUqoJeoWZupXwnHZyaDldhqQciJDkgZRWlp3LJuvKMlo1d6mUMEnHcpHOcfQmIkoB%2B5sKV%2BW03L6py%2F3hILM%2B%2BWCrd4%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a142f1d1c4c7c-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"Company with requested id: 8 is absent\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-14.CompanyByIdLangRU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": { \"type\": \"integer\" },\r",
									"        \"company_name\": {\"type\": \"string\" },\r",
									"        \"company_address\": { \"type\": \"string\" },\r",
									"        \"company_status\": { \r",
									"            \"type\": \"string\", \r",
									"            \"enum\" : [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            },\r",
									"            \"description_lang\": {\r",
									"                \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": { \r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [ \"EN\", \"RU\", \"PL\", \"UA\" ]\r",
									"                    },\r",
									"                    \"translation\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"if (pm.response.json().description) {                   // проверяем есть ли ключ description\r",
									"    pm.test(\"chars is Russian\", function () {\r",
									"        for (symb of pm.response.json().description) {  // проходимся по строке\r",
									"            pm.expect(symb).to.match(/[а-яё\\s\\W]/i)     // проверяем, является ли символ Русской буквой или пробелом или спецсимволом\r",
									"        }\r",
									"    })\r",
									"};\r",
									"\r",
									"pm.test(\"URI ID to eql company id\", function () {\r",
									"    let compIdInUrl = parseInt(pm.request.url.path[2]);\r",
									"    let compIdInResp = pm.response.json().company_id;\r",
									"    pm.expect(compIdInUrl).to.eql(compIdInResp);\r",
									"});\r",
									"\r",
									"// console.log(pm.request.url.path)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "CompanyByIdLangRU",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "RU",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/companies/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 15:05:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 15:05:41 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=cmRH%2FGRoveobCdRYzHfh1BNSx7HTnSHG3cqjty%2BeRiSPYYd%2BZwxBmFY%2BmvHoxJ%2FFl691ntu124Dfksp5PTiozcmw41sxqFuzAdsmxrZQ3xtxDTN6TNdq2eb7RsI%2FkFj0csg%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a18f369a04c7c-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"company_id\": 1,\n    \"company_name\": \"Tesla\",\n    \"company_address\": \"Nicholastown, IL 80126\",\n    \"company_status\": \"ACTIVE\",\n    \"description\": \"Ее сздать ст Спроси сиянье ей верьте се Ум Со Вершит ея. Дав Шум час Наш. Бодрствует бессмертие Их те обворожают от ободряться во изобразить. Со те Ты На не по. Нища горы Свое блат Глас гимн. На Се Но ея За да Ты ах. Уж ни За те. . \\ufeffкто Ея ИЗ До ея.\"\n}"
						}
					]
				},
				{
					"name": "PM-15.CompanyByIdInvLang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": { \"type\": \"integer\" },\r",
									"        \"company_name\": {\"type\": \"string\" },\r",
									"        \"company_address\": { \"type\": \"string\" },\r",
									"        \"company_status\": { \r",
									"            \"type\": \"string\", \r",
									"            \"enum\" : [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            },\r",
									"            \"description_lang\": {\r",
									"                \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": { \r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [ \"EN\", \"RU\", \"PL\", \"UA\" ]\r",
									"                    },\r",
									"                    \"translation\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"if (pm.response.json().description) {                   // проверяем есть ли ключ description\r",
									"    pm.test(\"chars is Russian\", function () {\r",
									"        for (symb of pm.response.json().description) {  // проходимся по строке\r",
									"            pm.expect(symb).to.match(/[а-яё\\s\\W]/i)     // проверяем, является ли символ Русской буквой или пробелом или спецсимволом\r",
									"        }\r",
									"    })\r",
									"};\r",
									"\r",
									"pm.test(\"URI ID to eql company id\", function () {\r",
									"    let compIdInUrl = parseInt(pm.request.url.path[2]);\r",
									"    let compIdInResp = pm.response.json().company_id;\r",
									"    pm.expect(compIdInUrl).to.eql(compIdInResp);\r",
									"});\r",
									"\r",
									"// console.log(pm.request.url.path)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "CompanyByIdLangRU Copy",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "AM",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/companies/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"companies",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 15:08:43 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 15:08:43 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2FQYJA7UtRoZ%2F9wby2w5CAuogm2frPam0VBiMFDH7cg5InIplGHAeAwP3ucz98UGEV%2BRqoQMvdLg2%2Bn1pyPDMjhxhpJwmacXUGiGLJk0sr9VwTsOqN8R1hm923ZtAOi1y6z8%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a1d622f0f4c7c-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"company_id\": 1,\n    \"company_name\": \"Tesla\",\n    \"company_address\": \"Nicholastown, IL 80126\",\n    \"company_status\": \"ACTIVE\",\n    \"description_lang\": [\n        {\n            \"translation_lang\": \"EN\",\n            \"translation\": \"Ye on properly handsome returned throwing am no whatever. In without wishing he of picture no exposed talking minutes. Curiosity continual belonging offending so explained it exquisite. Do remember to followed yourself material mr recurred carriage. High drew west we no or at john. About or given on witty event. Or sociable up material bachelor bringing landlord confined. Busy so many in hung easy find well up. So of exquisite my an explained remainder. Dashwood denoting securing be on perceive my laughing so.\"\n        },\n        {\n            \"translation_lang\": \"RU\",\n            \"translation\": \"Ее сздать ст Спроси сиянье ей верьте се Ум Со Вершит ея. Дав Шум час Наш. Бодрствует бессмертие Их те обворожают от ободряться во изобразить. Со те Ты На не по. Нища горы Свое блат Глас гимн. На Се Но ея За да Ты ах. Уж ни За те. . \\ufeffкто Ея ИЗ До ея.\"\n        },\n        {\n            \"translation_lang\": \"PL\",\n            \"translation\": \"Podkomorzynę powróciłaś tonąc spadku Lombardskiém kutasy dumać. Tonąc trzech kolną tajnym. Rozum żył rosciągnionych licem sądu rosciągnionemi Przysiągłbyś Otoż chowa niepowiedziała Runie Bezładnością Dobre. Podziękować okna nogi ojca Przyjechawszy byle przysunąwszy światłość domy. Pijem mniej gniew znów dziwi ruszy Żyje.\"\n        },\n        {\n            \"translation_lang\": \"UA\",\n            \"translation\": \"Ой у лузі червона калина похилилася. Чогось наша славна Україна зажурилася. А ми тую червону калину піднімемо, А ми нашу славну Україну, гей, гей, розвеселимо! А ми тую червону калину піднімемо, А ми нашу славну Україну, гей, гей, розвеселимо!\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "PM-16.UsersWithLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"meta\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"limit\": { \"type\": \"integer\" },\r",
									"                \"offset\": { \"type\": \"integer\" },\r",
									"                \"total\": { \"type\": \"integer\" }\r",
									"            },\r",
									"        \"required\": [ \"total\" ]\r",
									"    },\r",
									"    \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": [\r",
									"            {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"first_name\":   { \"type\": [ \"string\", \"null\" ] },\r",
									"                    \"last_name\":    { \"type\": \"string\" },\r",
									"                    \"company_id\":   { \"type\": [ \"integer\", \"null\" ] },\r",
									"                    \"user_id\":      { \"type\": \"integer\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"last_name\",\r",
									"                    \"user_id\"\r",
									"                ]\r",
									"            }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"meta\",\r",
									"        \"data\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with limit=10\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].user_id).to.eql(67)   // offset=5 hence user_id = 67\r",
									"});\r",
									"\r",
									"console.log(DataJson[0])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=10&offset=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": [
						{
							"name": "UsersWithLimit&Offset",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "AM",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users/?limit=10&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "5"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 15:29:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 15:29:21 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=VHDeArINXYrqi7vcv72ggeSx5A6edu7HHeaF6UiQ7WkpXZ2VWtkslWJyuQqch1VhUpxcdytcmbQkpA0eZFmId1g7m%2FpU1Tp5vY10Cr%2Brrm5pmwGsnqv3SH%2F%2FaYPRK3wI3dg%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a3b9a3ece3766-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {\n        \"limit\": 10,\n        \"offset\": 5,\n        \"total\": 16901\n    },\n    \"data\": [\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 64\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 67\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 68\n        },\n        {\n            \"first_name\": \"Jony\",\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 69\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 70\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 72\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 73\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 74\n        },\n        {\n            \"first_name\": \"Jony\",\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 75\n        },\n        {\n            \"first_name\": null,\n            \"last_name\": \"morpheus\",\n            \"company_id\": null,\n            \"user_id\": 76\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-17.UsersWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with default limit=3\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify default offset=0\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=-1&offset=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": [
						{
							"name": "UsersWithInvQueryLimit",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "AM",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users/limit=-1&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"limit=-1&offset=5"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 15:58:36 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "104"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=FBpTCpVYcARZ6TNgubKChBNp%2FwzggWfXjJayjYmTKaicGqNQOjWPC%2FDO821i%2FrMDmQijYOR668bUClrYrNKBJqRPzdBjBzc%2BBa%2FtAi%2FBrRE4tQCLNlE6H436qyN5NWJjzyM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a66784a04d93b-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"user_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-18.UsersWithStrLimit&Offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with default limit=3\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify default offset=0\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/?limit=abc&offset=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "abc"
								},
								{
									"key": "offset",
									"value": "abc"
								}
							]
						}
					},
					"response": [
						{
							"name": "UsersWithStrLimit&Offset",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "AM",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/users/?limit=abc&offset=abc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "abc"
										},
										{
											"key": "offset",
											"value": "abc"
										}
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 15:52:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "195"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=PTa2EAEgr55yYxLRuvPHRDPRgXoQ3UduYHM80Sp13PLrLDRBGJzU0THeT14rwL2NGCDzU7FU1nd6e%2FfANL65tAI8myXT74z%2B99xru5EkM3ibq7%2BZMVV6BX9kzsVDzp6ITRQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a5e26bf0bd93b-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"limit\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        },\n        {\n            \"loc\": [\n                \"query\",\n                \"offset\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-19.UsersWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"\r",
									"pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.be.oneOf(['https://send-request.me/api/users', 'https://send-request.me/api/users/']);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "AM",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://send-request.me/api/users",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "UsersWithoutSSL",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "AM",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://send-request.me/api/users",
									"protocol": "http",
									"host": [
										"send-request",
										"me"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Moved Permanently",
							"code": 301,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:12:34 GMT"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=3600"
								},
								{
									"key": "Expires",
									"value": "Mon, 14 Aug 2023 17:12:34 GMT"
								},
								{
									"key": "Location",
									"value": "https://send-request.me/api/users"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=obSAsuQIblNU6hrATM%2FTMqtE5Fbdr%2F6toJ8LupuZVoX4XxE2uARsVdA6LLzSBX51L%2F8jo8gyyZvBwdt%2B9S8obuEapWEHkVJ2XlRxio5IXTpBmh13MavFa8nLMI3OjhI3i%2BE%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6a7aeac928d922-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "PM-20.UserCreated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 201\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"pm.test(\"Status code be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"user_id\", pm.response.json().user_id);\r",
									"pm.collectionVariables.set(\"first_name\", pm.response.json().first_name);\r",
									"pm.collectionVariables.set(\"last_name\", pm.response.json().last_name );\r",
									"pm.collectionVariables.set(\"company_id\", pm.response.json().company_id);\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [\"Pifagor\"]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [\"Samosskiy\"]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ 1 ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"PM-34.IssuesGetUserById\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "UserCreated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 03:31:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "79"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "201"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=7NnZh%2BRDQQ%2F87r%2Bzdpt02SEAOklhKpUGG%2FWr1exMswwIVEDkew8zwl2obIfpBwChZNrJh4GHhxpsRTj5iO1Uqc1GeHKSMdcStn7GzdZS6cwnimp1vVJ28rDkXg0UOFCk1bQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6e5cf0e9ccd953-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Pifagor\",\n    \"last_name\": \"Samosskiy\",\n    \"company_id\": 3,\n    \"user_id\": 19507\n}"
						},
						{
							"name": "UserCreated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 05:07:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "79"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "201"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tVfmE%2BKGXifHwdbgkGgHATjWZQK9fE69Bdp1tcN5Ca6%2FEMj0qm78SWLW0ujh4bRT5%2Bp%2F7MskZJSsCyUHAW02JNgUAxqlQN8RxnzL2JO7HxedCWnO2jfrSCZtgG2Anw35ZO0%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6ee9b24fa74c7f-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Pifagor\",\n    \"last_name\": \"Samosskiy\",\n    \"company_id\": 3,\n    \"user_id\": 19511\n}"
						},
						{
							"name": "PM-20.UserCreated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 26 Aug 2023 01:58:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "79"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "201"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=EmryK2SH9OOVpZWuWrtguQMPl9uFBJuCNZgREpNheE0VDnTH2%2FsXKtwSpMCPkH4wyUnkjfH4SvRqcyraFZBlj2tVcLlDhi5Bx8gAxe2atTWILKT8uLidHo1NB36jaIoHkqI%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7fc877c2ddfc4e0f-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Pifagor\",\n    \"last_name\": \"Samosskiy\",\n    \"company_id\": 1,\n    \"user_id\": 20444\n}"
						}
					]
				},
				{
					"name": "PM-21.UserCreatedWithInvCompanyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": \"Proverkov\",\r\n  \"company_id\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "UserCreatedWithInvCompanyId",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": \"Proverkov\",\r\n  \"company_id\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 03:49:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "404"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=rYjh8szQjuoFuwLnTWwBnl1NvTgqFn32wZMa5t0rOS2gLzOS%2Bt43MLhiE3daSc4SUovPg310UO0OmP%2FpY670wuewX0DsaZAUfKsxf3RtKdkc2ioBf%2BSxVSmQ14jFYzRBuRk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6e7736ed39d906-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"Company with requested id: 8 is absent\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-22.UserCreatedWithLastNameNull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": null,\r\n  \"company_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "UserCreatedWithLastNameNull",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": null,\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 04:33:16 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "115"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=yM1NH%2BwPpgAwFCKHqTyf8PwxKSiIQ%2F0AYRXuPaOnSjFGi%2BBUjgnZ7mRfAcW5ygR7hG2grLVWUEFWImoxAmoZo7RMzhlvlbV8MUC2r9zOcMaNqlZUFztQM52Jfdu9oqDQTSU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6eb7effb3cd967-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"last_name\"\n            ],\n            \"msg\": \"none is not an allowed value\",\n            \"type\": \"type_error.none.not_allowed\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-23.UserCreatedWithCompanyClosed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": \"Proverkov\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "UserCreatedWithCompanyClosed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": \"Proverkov\",\r\n  \"company_id\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 04:43:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "98"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=lvb%2B%2FrEIY6JmSeYmcbeZIV3Vhs8tftHoJzlhmyFtgHgrzpkuK0DWr%2BWljYwQyjXfISWdK%2FjLTfg1SBK3Mlj3I7Mr5MzY5V7WP%2BRTe2cgAYuV8T3glvqff7IAfV3RTqZMgek%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6ec709bd7fd91a-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"User could not be assigned to company with id: 5. Because it is not active\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-24.UserCreatedWithInvBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"company_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "UserCreatedWithCompanyClosed Copy",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 04:49:47 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "93"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "422"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=OMBZrCyAzNX16r7eTUnBwxxdXtcs1%2FI2GwpzOSZQwu9meG8ckTz93gFDE1Q55ZH7fQknK49kaMkBXuqPo0Jphb51PQZTOg9%2FmuUxMHQE1U%2BZGGXwvyt7WzwbpuxK5wYaqrg%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6ed0209926d91a-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"last_name\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-25.GetCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"variable_key\");\r",
									"\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name \");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"\r",
									"// pm.test(\"Status code is 201\", function () {\r",
									"//     pm.response.to.have.status(201);\r",
									"// });\r",
									"pm.test(\"Status code be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ user_id ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "GetCreatedUser",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/19507",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"19507"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 05:12:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 15 Aug 2023 05:12:04 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=oad0zmmn%2Fe48zSg%2FiWhf%2F6JhrD79fHr5edIRENOz5GmUrsgC1%2B96A9A7OSH9OHoYOIzCGJ2R0IBa0VsCFY0gi%2F0%2FmxEfZSApGjWFNb%2FvOPknZtPf7%2BdMTfdjQH1TqoySvOU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6ef0c58af14c7f-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Pifagor\",\n    \"last_name\": \"Samosskiy\",\n    \"company_id\": 3,\n    \"user_id\": 19507\n}"
						}
					]
				},
				{
					"name": "PM-26.GetCreatedUserWithInvId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/666666",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"666666"
							]
						}
					},
					"response": [
						{
							"name": "PM-26.GetCreatedUserWithInvId",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/666666",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"666666"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 05:12:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "404"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=j%2FBGspxqxWM0QBgLbC2k6RbVXifPcpDxcrAQKaAN7ypJxDegdLeQ1gH51Mlu0arc%2FqL3SNxGnu1pwL%2Fc7x6%2BM2vR3%2B8rO83tZAFXWyJcvRWmr7%2FkeC2y1XSo6KmIYkAiCJc%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6ef14899a94c7f-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"User with requested id: 666666 is absent\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-27.UserUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Pascal\");\r",
									"pm.collectionVariables.set(\"company_id\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"\r",
									"pm.test(\"Status code be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ user_id ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserUpdate",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/19511",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"19511"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 05:30:49 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0Gx7mzMg83KGrxTOtqVHlZHE%2BwqYXF%2BDnnsy%2BK53R0yjbJkm3PD4WvkFU%2BaEf9vC8ZJovgTiHBe5y4vK3Vr%2B%2BamEssDjqfGE7xkgeaqH0sGQeTwsy3Qw2x7G30sNkWdPJK8%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6f0c3bb8274c84-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Blez\",\n    \"last_name\": \"Pascal\",\n    \"company_id\": 1,\n    \"user_id\": 19511\n}"
						}
					]
				},
				{
					"name": "PM-28.UserUpdateWithInvCompany",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Pascal\");\r",
									"pm.collectionVariables.set(\"company_id\", 8);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"\r",
									"// pm.test(\"Status code be success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"pm.test(\"Status code is client error \", function () {\r",
									"    pm.response.to.have.clientError;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserUpdate Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/19511",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"19511"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 06:15:02 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "404"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=7WtyKmAGtfELaAnp1wpPP1rxBkW41xQ3%2FnTRsZJleYFVSVTFR1nsknn989jv09ufLLJfQkDF7%2FvA4tvFOMn%2Fa7FyV%2BVXC2Gk6M5eiWP2iiddwA9sFQrn7brq%2FSt9sjY26Sc%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6f4d02e950df68-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"Company with requested id: 8 is absent\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-29.UserUpdateWithInvUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name\", \"Pascal\");\r",
									"pm.collectionVariables.set(\"company_id\", 1);\r",
									"pm.collectionVariables.set(\"user_id\", 666666);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"\r",
									"// pm.test(\"Status code be success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"pm.test(\"Status code is client error \", function () {\r",
									"    pm.response.to.have.clientError;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserUpdateWithInvCompany Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/666666",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"666666"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 06:25:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "404"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=iC%2Feql8JSrYGmlDN%2FCjKXFxAwKURU1c5FMu1mzPV24uxWC0qOnVzeafEWz6po56LpB6s37ugd4%2BEA4ODpD4khkFYIaWJkb9H7EcoHRYA7tp1Swu5RRgLoyvnVuNPTdEhSZU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6f5bbe9f314c7e-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"User with requested id: 666666 is absent\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-30.DeleteCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is object\", function(){\r",
									"    pm.expect(pm.response.json()).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "DeleteCreatedUser",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/19507",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"19507"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 06:30:51 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "202"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=WmUnJKCfU9bjAHsjjeh5pQHfyo%2F0hrqRRXkcRad%2F05yaYHogtR91ZBSNoOZ0sIFLcWAfkSFzUMl%2FJLYBzUNOYItNtZT%2FimOmjdUoaqf7U8DfqZ87PjTlvTvtiKKdYv547VU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f6f642befbe4c7e-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				},
				{
					"name": "PM-31.DeleteInvUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", 666666);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is client error \", function () {\r",
									"    pm.response.to.have.clientError;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "DeleteInvUser",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/666666",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"666666"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 08:52:03 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "404"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ePJcye0jn1MkR8U5RJ%2FFFrEqbCVbr95qUy876QnW2wjlpf3vIT0suz74nKK2%2BvbN3ukLDXI5NYSfZLEtoiEVv6eomWrzVfG47Dlk6BSIkrlzz%2FWu4V2rp1%2BXxJgICBo%2F2UE%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f7033020e8e4e19-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"User with requested id: 666666 is absent\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "issues",
			"item": [
				{
					"name": "PM-32.IssuesCompanyesWithQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"\t      \"enum\": [ \"ACTIVE\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Len of JSON with limit=5\", function() {\r",
									"    let countLenData = Object.keys(DataJson).length;\r",
									"    pm.expect(countLenData).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify offset\", function() {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(1)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies?limit=1&offset=1&status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": [
						{
							"name": "IssuesCompanyesWithQuery",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/issues/companies?limit=1&offset=1&status=ACTIVE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"issues",
										"companies"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "1"
										},
										{
											"key": "status",
											"value": "ACTIVE"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 09:16:32 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 15 Aug 2023 09:16:32 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=5m3E%2FqIVLZ2lSCD98GR%2BsLQY1zc%2B0Yp4sZtJhzGqFQK2oK1lCjhQ3XiEtTYxm0GP3PiVtjvo8VgfDFaFSkaX8OwGZL6HpT6E4VshJuUpLxgF5nCEDqcSDKVcUJX0GIFMZiU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f7056dc1db2d90a-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"company_id\": 6,\n            \"company_name\": \"BitcoinCorp\",\n            \"company_address\": \"85958 Cindy Wall\",\n            \"company_status\": \"CLOSED\"\n        }\n    ],\n    \"meta\": {\n        \"limit\": 1,\n        \"offset\": 1,\n        \"total\": 2\n    }\n}"
						}
					]
				},
				{
					"name": "PM-33.IssuesCompanyByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"company_id\": { \"type\": \"integer\" },\r",
									"        \"company_name\": {\"type\": \"string\" },\r",
									"        \"company_address\": { \"type\": \"string\" },\r",
									"        \"company_status\": { \r",
									"            \"type\": \"string\", \r",
									"            \"enum\" : [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            },\r",
									"            \"description_lang\": {\r",
									"                \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"translation_lang\": { \r",
									"                        \"type\": \"string\",\r",
									"                        \"enum\": [ \"EN\", \"RU\", \"PL\", \"UA\" ]\r",
									"                    },\r",
									"                    \"translation\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                \"required\": [\r",
									"                    \"translation_lang\",\r",
									"                    \"translation\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"company_id\",\r",
									"        \"company_name\",\r",
									"        \"company_address\",\r",
									"        \"company_status\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"\r",
									"postman.setNextRequest(\"PM-35.IssuesUserCreated\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"companies",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "IssuesCompanyByID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/issues/companies/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"issues",
										"companies",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 09:18:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 15 Aug 2023 09:18:56 GMT"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tFJbjctc6eIhDRGDRPEiW6KM1jBcHF5AufkwEPvRj3ygXEMKW4Og80hfcJOV58wuNYrJv8TnC1SxnGJGTs1EjFITHyaWx4DUikqpulnoHSVOgQYXt9cjda7GjEwFSF1ppfs%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f705a409d59d90a-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"company_id\": 1,\n    \"company_name\": \"Tesla\",\n    \"company_address\": \"Nicholastown, IL 80126\",\n    \"company_status\": \"ACTIVE\",\n    \"description_lang\": [\n        {\n            \"translation_lang\": \"EN\",\n            \"translation\": \"Ye on properly handsome returned throwing am no whatever. In without wishing he of picture no exposed talking minutes. Curiosity continual belonging offending so explained it exquisite. Do remember to followed yourself material mr recurred carriage. High drew west we no or at john. About or given on witty event. Or sociable up material bachelor bringing landlord confined. Busy so many in hung easy find well up. So of exquisite my an explained remainder. Dashwood denoting securing be on perceive my laughing so.\"\n        },\n        {\n            \"translation_lang\": \"RU\",\n            \"translation\": \"Ее сздать ст Спроси сиянье ей верьте се Ум Со Вершит ея. Дав Шум час Наш. Бодрствует бессмертие Их те обворожают от ободряться во изобразить. Со те Ты На не по. Нища горы Свое блат Глас гимн. На Се Но ея За да Ты ах. Уж ни За те. . \\ufeffкто Ея ИЗ До ея.\"\n        },\n        {\n            \"translation_lang\": \"PL\",\n            \"translation\": \"Podkomorzynę powróciłaś tonąc spadku Lombardskiém kutasy dumać. Tonąc trzech kolną tajnym. Rozum żył rosciągnionych licem sądu rosciągnionemi Przysiągłbyś Otoż chowa niepowiedziała Runie Bezładnością Dobre. Podziękować okna nogi ojca Przyjechawszy byle przysunąwszy światłość domy. Pijem mniej gniew znów dziwi ruszy Żyje.\"\n        },\n        {\n            \"translation_lang\": \"UA\",\n            \"translation\": \"Ой у лузі червона калина похилилася. Чогось наша славна Україна зажурилася. А ми тую червону калину піднімемо, А ми нашу славну Україну, гей, гей, розвеселимо! А ми тую червону калину піднімемо, А ми нашу славну Україну, гей, гей, розвеселимо!\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PM-34.IssuesGetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"variable_key\");\r",
									"\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name \");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// pm.test(\"Status code be success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ user_id ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// вариант: создаем пользователя за счет перенаправления запросов в коллекции\r",
									"postman.setNextRequest(\"PM-21.UserCreatedWithInvCompanyId\")\r",
									"\r",
									"// вариант: вместо перенаправления запросов создаем в pre-requests нового пользователя\r",
									"// const req = {                                        // данные для запроса на удаление пользователя\r",
									"//     url: pm.variables.replaceIn(\"https://send-request.me/api/users/{{user_id}}\"),\r",
									"//     method: \"DELETE\",\r",
									"// }\r",
									"\r",
									"// pm.sendRequest(req, function (err, response) {       // запрос для удаления пользователя\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// вариант: вместо перенаправления запросов создаем в pre-requests нового пользователя нового пользователя\r",
									"// const req = {                                               // объявили переменную req\r",
									"//     url: pm.environment.replaceIn(\"{{baseUrl}}/api/users\"), // на этот URL отправляем запрос\r",
									"//     method: \"POST\",                                         // Определяем метод\r",
									"//     header: {\r",
									"//         \"Content-Type\": \"application/json\",                 // Определяем \"Content-Type\" нашего request body\r",
									"//     },\r",
									"//     body: {\r",
									"//         mode: \"raw\",                                        // определяем формат request body\r",
									"//         raw: {                                              // в ключ raw передаем JSON, для регистрации юзера\r",
									"//             \"first_name\": \"PM34_user_firstname\",\r",
									"//             \"last_name\": \"PM34_user_lastname\",\r",
									"//             \"company_id\": 3, \r",
									"//         },\r",
									"//     },\r",
									"// }\r",
									"\r",
									"// pm.sendRequest(req, function (err, response) {                                                            \r",
									"//     pm.variables.set(\"user_id\", response.json().user_id);   // сетаем в локальную переменную user_id\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "IssuesGetUserById",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/issues/users/19523",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"issues",
										"users",
										"19523"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 09:48:14 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "48"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "202"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=VlODq%2BA2PplO2oYznBf4ur8p6vljesaIv6PCjHt%2FcFwiOdMI%2F6EFPb4E0kyYmncLiIZQjhCyW9gobTQ4qQaK4waZe2%2FEebZDAv56erJYixlBG7sFZzIov7aNoIPjGaDzO%2Bs%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f70854b6d2a4c7b-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Pifagor\",\n    \"last_name\": \"Samosskiy\"\n}"
						}
					]
				},
				{
					"name": "PM-35.IssuesUserCreated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Pifagor\");\r",
									"pm.collectionVariables.set(\"last_name \", \"Samosskiy\");\r",
									"pm.collectionVariables.set(\"company_id\", 3);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"\r",
									"pm.test(\"Status code be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/issues/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "IssuesUserCreated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/issues/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"issues",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 10:07:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "94"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "201"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=SGsmnv7W0tTfJPfExP4MKbJfu%2FBk%2Feq77JP4w6Z59PB3r00TDNAcziJIVPb0AdWheGpdXs9I3wOCPAj4QsHDgY5EWm3ZONb2Ae46wgbPS5lcn76IoUCUUFujcP8CSArCewA%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f70a142cf6a4c85-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Ne ny eto odnoznachno\",\n    \"last_name\": \"BAGGGGGGGG\",\n    \"company_id\": 1,\n    \"user_id\": 19530\n}"
						}
					]
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "Create token",
					"item": [
						{
							"name": "AuthLogin3PassVal",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin3PassVal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:20:34 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "44"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "200"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=2CbmwZtFKeFV9hl7UczsCLOkydeBpxbwn1xuJC%2BV3TDdzu0iq6CT%2B33uDgTwCSFJXwfUAErL0LqPgyjEs5%2ByzseZa5I3a8uvx%2F3wQLaQsT%2FRQoe05pIV4Fl2kpExAGorrFU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d8b7b2fd5d94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"token\": \"817fd1e2b6276a5b17b81296a676aaa0\"\n}"
								}
							]
						},
						{
							"name": "AuthLogin7PassVal",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwertyu\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin7PassVal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"qwertyu\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:21:41 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "44"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "200"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=VSmKmBzvGaOswjLzwbOa2nNL9UiZ3B%2Fxue5eAC9EOwv%2F5FSzK7Cu22HWV7LBlheFiuajYhb4AQ6fiOObXwvCiYXt4I2KcilSeerGpWrBjIW6fAWRS8%2B1G3ml0B382F%2FPnhc%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d8d1dcca8d94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"token\": \"57c5560f7bdfd7becd41a31fa00ac687\"\n}"
								}
							]
						},
						{
							"name": "AuthLogin1PassVal",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"q\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin1PassVal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"q\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Unprocessable Entity",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:23:07 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "153"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "422"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=3FpPSkzCOri5zJGw%2FmgR4V4V0VCmMjbFHeeg%2BG8mMNn62rs%2FQGsM701unUSeaBVGvz9jTA2j3shZZscRWkvHI3Ct1vPlc5pAAK3uZ9sbjPxF6IOrtZNW96invr%2FQHOxaC68%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d8f361b11d94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"login\"\n            ],\n            \"msg\": \"ensure this value has at least 3 characters\",\n            \"type\": \"value_error.any_str.min_length\",\n            \"ctx\": {\n                \"limit_value\": 3\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "AuthLogin2PassVal",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qw\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin2PassVal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"qw\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Unprocessable Entity",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:23:45 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "153"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "422"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=bXdTZKPSnVsS%2BC9FbEGL%2BzjQ1XTRXu3qmCGa6tkzvVl5D%2BRMNNPwKW1UT8ECi18xzaqD2UjD8chEmU9YbV5Az9pMhEU1ts4mvkZ4SlL83APXqEgtgp%2BmJsvOn5Y8vJvArqE%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d90254886d94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"login\"\n            ],\n            \"msg\": \"ensure this value has at least 3 characters\",\n            \"type\": \"value_error.any_str.min_length\",\n            \"ctx\": {\n                \"limit_value\": 3\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "AuthLoginEmptyPassVal",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLoginEmptyPassVal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"\",\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Unprocessable Entity",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:25:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "153"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "422"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=kNnAMbynxV38obMmSVY751NruP%2BHBZQ7nOYWnGvbrWh5vzpFmsRUwl2bxSXZu%2Fq35EVGv94LBQ054s9%2BNegnduZTxGLTh6X66a9SoQIsqO9Zz0H5n9H7NO7f51nAKVJgXuE%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d9361dd5ed94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"login\"\n            ],\n            \"msg\": \"ensure this value has at least 3 characters\",\n            \"type\": \"value_error.any_str.min_length\",\n            \"ctx\": {\n                \"limit_value\": 3\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "AuthLoginEmptyPassVal",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLoginEmptyPassVal",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"password\": \"qwerty12345\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Unprocessable Entity",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:30:25 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "89"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "422"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=GNHdA731yZ5sK%2F87n73ed%2FZ5MGcF31sUvZLByZrl0vClk8YvqHWpebnE1%2F6gRSJFdlvEtLThwxXxHCwssU1RiIBJ43cmU%2B38g%2Fut7%2BzcXggIjgykfntoaxhF5zWRmQygA1A%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d99eaf92ed94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"login\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "AuthLogin3PassAbsent",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin3PassAbsent",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Unprocessable Entity",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:31:14 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "92"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "422"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=llkz1B78VRfDWqgNn6VRNAhX3CUU6AJ2MOEFEXf8ukat2dXP4nRq6t4WclDxB%2FFSW9O%2B1K8ZjqG%2FhSduTO4OFt17khmr1AxIKjW5WEj4DueKyESugRYNjYfJIWwf3AQZnvM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d9b1b7ceed94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"password\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "AuthLogin3PassInv",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"bad_password\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin3PassInv",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"bad_password\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:20:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "403"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0JCLtEQNsBSHG6JkB5TVtWDZ%2B9hENoqjVQbV6rWIQEtvOAJpUYw4zK0NQuQ7neEiZE2i7tUa9JD57%2Byc5yOODYLRZqXgOpNE91DBnQtdz4W6GIsBgA8Nj5NpFE1JHhaSCWM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d8b3f2e9ad94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": {\n        \"reason\": \"Invalid password\"\n    }\n}"
								}
							]
						},
						{
							"name": "AuthLogin3PassEmpty",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"\",\r\n  \"timeout\": 360\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"authorize"
									]
								}
							},
							"response": [
								{
									"name": "AuthLogin3PassEmpty",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"login\": \"qwe\",\r\n  \"password\": \"\",\r\n  \"timeout\": 360\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"authorize"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:33:19 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "403"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=%2FdSJaZCx6vaAIxdu3ryCoRGxwe6aIWxusFlVSbo4N1Tw4Ddy1QrXQ8Nr3SkRCccSn7Xt4mEiuhtvx3zy0JEzrJo2EpWUzyPGAWDPIpxK4hlBHLbq3TRIMu8GXAdeK%2FcdYe8%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8d9e2a8946d94b-HEL"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": {\n        \"reason\": \"Invalid password\"\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get user info",
					"item": [
						{
							"name": "MeTokenVal",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "MeTokenVal",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:43:42 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "200"
										},
										{
											"key": "Last-Modified",
											"value": "Fri, 18 Aug 2023 22:43:42 GMT"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=XblSaHpTE%2FTCzM%2BCxzxsn1NMzyYQ6SLG2leAMruriI%2FnCswx6f%2FufmiZCkbS2%2BZidDioZ3bxUmbQTC2O%2FNbMeXYVHcuTe1SEdHvmn7kqzrnc4HTAbVTv%2B4kp2T0vBJdcoIk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8dad5fa9d84e12-HEL"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"user_name\": \"qwe\",\n    \"email_address\": \"qwe@example.com\",\n    \"valid_till\": \"2023-08-18T22:48:50.933015\"\n}"
								}
							]
						},
						{
							"name": "MeTokenInv",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "817fd1e2b6276a5b17b81296a676aaa0xzcvzxcv",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "MeTokenInv",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:46:20 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "403"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=sS8q1CyPqj5hn5Y88tLygy0pgDfuGxdOYtvjTNT29RL6ObCC2c5RAmfuiJhMMC3Gl4ED0efQqjAbPHWNV2Yarfg5rI3b%2ByrqteWzV%2F1RY%2BDMYNj4WiDfWK4W9LV9M9C2P8w%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8db13c3dbb4e12-HEL"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": {\n        \"reason\": \"Token is incorrect. Please login and try again\"\n    }\n}"
								}
							]
						},
						{
							"name": "MeTokenExpired",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "MeTokenExpired",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:49:24 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "403"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=9XyZPVXkazPbiswGcnXM%2BvbpHPVv0EwsFeg9%2FDSoSO2WHMaj%2BR%2FG4svWx%2FQH5wMmZwc2Qjp7c84tpiNhVYVqp7vLQ4syoatJPECc9v0hkL3U36eZsgwOimbP8E9RRcaC5pU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8db5b52c034e12-HEL"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": {\n        \"reason\": \"Token is expired. Please login and try again\"\n    }\n}"
								}
							]
						},
						{
							"name": "MeTokenEmpty",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "MeTokenEmpty",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"me"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 18 Aug 2023 22:47:56 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-do-app-origin",
											"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
										},
										{
											"key": "cache-control",
											"value": "private"
										},
										{
											"key": "x-do-orig-status",
											"value": "403"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=8Mv6E5L93htXou%2FBNd0vqNjckihVU7OujhNlK5XDgkyHP5bLhH2I4MBU4Ng3EXTd%2BuRuuSlCvURAUEh4r81RS%2BDvtwyQtGp4xg5NKixo7pr4Tf8hzw4JQ1uF1CeMg66SZfc%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "NEL",
											"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f8db38fba914e12-HEL"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": "{\n    \"detail\": {\n        \"reason\": \"Token is incorrect. Please login and try again\"\n    }\n}"
								}
							]
						}
					],
					"auth": {
						"type": "apikey",
						"apikey": [
							{
								"key": "value",
								"value": "4b146cc679aaed80776bd33e37faa30d",
								"type": "string"
							},
							{
								"key": "key",
								"value": "x-token",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Self",
			"item": [
				{
					"name": "PM-36.UserUpdateWithCompanyClosed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name \", \"Pascal\");\r",
									"pm.collectionVariables.set(\"company_id\", 5);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"\r",
									"// pm.test(\"Status code be success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"pm.test(\"Status code is client error \", function () {\r",
									"    pm.response.to.have.clientError;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserUpdateWithCompanyClosed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/19530",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"19530"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 13:47:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "98"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ID%2FXjQdqYAcJoCPnJIypfQ9YGZkKS0JkFxfoFYMohIPaX%2FZe%2BBUOuXfDQipXGAiluuaFX4Q6TmMTIQHXbMwNWng4DA%2BAdSKh7gCmimfBm5MH%2B%2FHoyIcmt%2Fs%2F6KzqHsVODxI%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f71e40e8ee94e1a-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": {\n        \"reason\": \"User could not be assigned to company with id: 5. Because it is not active\"\n    }\n}"
						}
					]
				},
				{
					"name": "PM-37.UserUpdateWithoutSSL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = {                                               // объявили переменную req\r",
									"    url: pm.environment.replaceIn(\"{{baseUrl}}/api/users\"), // на этот URL отправляем запрос\r",
									"    method: \"POST\",                                         // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",                 // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",                                        // определяем формат request body\r",
									"        raw: {                                              // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"PM37_user_firstname\",\r",
									"            \"last_name\": \"PM37_user_lastname\",\r",
									"            \"company_id\": 3, \r",
									"        },\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {                                                            \r",
									"    pm.variables.set(\"user_id\", response.json().user_id);       // сетаем в локальную переменную user_id\r",
									"    pm.variables.set(\"first_name\", response.json().first_name);\r",
									"    pm.variables.set(\"last_name\", response.json().last_name);\r",
									"    pm.variables.set(\"company_id\", response.json().company_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"// let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.include.oneOf (\r",
									"        [ \r",
									"            'https://send-request.me/api/users', \r",
									"            'https://send-request.me/api/users/'\r",
									"        ]\r",
									"    );\r",
									"});\r",
									"\r",
									"const req = {                                        // данные для запроса на удаление пользователя\r",
									"    url: pm.variables.replaceIn(\"https://send-request.me/api/users/{{user_id}}\"),\r",
									"    method: \"DELETE\",\r",
									"}\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {       // запрос для удаления пользователя\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://send-request.me/api/users/{{user_id}}",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserUpdateWithoutSSL",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://send-request.me/api/users/19530",
									"protocol": "http",
									"host": [
										"send-request",
										"me"
									],
									"path": [
										"api",
										"users",
										"19530"
									]
								}
							},
							"status": "Moved Permanently",
							"code": 301,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 14:33:37 GMT"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=3600"
								},
								{
									"key": "Expires",
									"value": "Tue, 15 Aug 2023 15:33:37 GMT"
								},
								{
									"key": "Location",
									"value": "https://send-request.me/api/users/19530"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=cO1WvmlvIHUUQ4QniSl5cwh%2Bbzf5FGftIooqSlPAqegfRzHH2Hy7%2BSLbe3avQA%2BHGeHomCGvCNPSOV3tFqryewDlTpNW7jUD273BbjTAZ%2BA9wMPKVhybGVpTXiXzztTVvxY%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f7227562a55d922-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "PM-38.UserDeleteWithoutSSL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const req = {                                               // объявили переменную req\r",
									"    url: pm.environment.replaceIn(\"{{baseUrl}}/api/users\"), // на этот URL отправляем запрос\r",
									"    method: \"POST\",                                         // Определяем метод\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",                 // Определяем \"Content-Type\" нашего request body\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",                                        // определяем формат request body\r",
									"        raw: {                                              // в ключ raw передаем JSON, для регистрации юзера\r",
									"            \"first_name\": \"PM38_user_firstname\",\r",
									"            \"last_name\": \"PM38_user_lastname\",\r",
									"            \"company_id\": 3, \r",
									"        },\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {                                                            \r",
									"    pm.variables.set(\"user_id\", response.json().user_id);       // сетаем в локальную переменную user_id\r",
									"    pm.variables.set(\"first_name\", response.json().first_name);\r",
									"    pm.variables.set(\"last_name\", response.json().last_name);\r",
									"    pm.variables.set(\"company_id\", response.json().company_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"// let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									"pm.test(\"Status code is 301\", function () {\r",
									"    pm.response.to.have.status(301);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.include.oneOf (\r",
									"        [ \r",
									"            'https://send-request.me/api/users', \r",
									"            'https://send-request.me/api/users/'\r",
									"        ]\r",
									"    );\r",
									"});\r",
									"\r",
									"const req = {                                        // данные для запроса на удаление пользователя\r",
									"    url: pm.variables.replaceIn(\"https://send-request.me/api/users/{{user_id}}\"),\r",
									"    method: \"DELETE\",\r",
									"}\r",
									"\r",
									"pm.sendRequest(req, function (err, response) {       // запрос для удаления пользователя\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://send-request.me/api/users/{{user_id}}",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserDeleteWithoutSSL",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": \"Pascal\",\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://send-request.me/api/users/19530",
									"protocol": "http",
									"host": [
										"send-request",
										"me"
									],
									"path": [
										"api",
										"users",
										"19530"
									]
								}
							},
							"status": "Moved Permanently",
							"code": 301,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 14:51:30 GMT"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=3600"
								},
								{
									"key": "Expires",
									"value": "Tue, 15 Aug 2023 15:51:30 GMT"
								},
								{
									"key": "Location",
									"value": "https://send-request.me/api/users/19530"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=MTHO%2BNSAR%2F0qTc1vfwvbBNvjvTJ04VsUTWpPtNtjXHgZlRJ%2FZIlNGd35UZCQp5RpxkVWWtqlas1P8kGlKdSqIAqO1pRvhkX8VN0kkg3IW%2B3oHUHaOkRn%2Bl4SQF4exPihLxw%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f72418e5826d94f-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "PM-39.UserCreatedWithInvName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Kaleka\");\r",
									"pm.collectionVariables.set(\"last_name\", 123);\r",
									"pm.collectionVariables.set(\"company_id\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"\r",
									"pm.test(\"Status code be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"// pm.test(\"Status code is client error \", function () {\r",
									"//     pm.response.to.have.clientError;\r",
									"// });\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"first_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ first_name ]\r",
									"    },\r",
									"    \"last_name\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [ last_name ]\r",
									"    },\r",
									"    \"company_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ company_id ]\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"integer\",\r",
									"      \"enum\": [ user_id ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"last_name\",\r",
									"    \"user_id\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": \"{{company_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "UserCreatedWithInvName",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Kaleka\",\r\n  \"last_name\": 123,\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 15:00:33 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "72"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "201"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=t5UEobGraZ3N%2Bc%2FjSUpcqCeLnnMIbxIP5tOpkpZhZvG8Iw%2F6zpDLbz%2BMYO40qQHKkXucdP4KqB%2F9yw6AWnhAAo2SaIKJOWkMGy4dIls%2B%2Bv3eepAJzEUV%2BrloUb9kOGynRvU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f724ecc8e504c87-HEL"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Kaleka\",\n    \"last_name\": \"123\",\n    \"company_id\": 1,\n    \"user_id\": 19650\n}"
						}
					]
				},
				{
					"name": "PM-40.UserUpdateWithInvName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"first_name\", \"Blez\");\r",
									"pm.collectionVariables.set(\"last_name \", 123);\r",
									"pm.collectionVariables.set(\"company_id\", 3);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"let user_id = parseInt(pm.collectionVariables.get(\"user_id\"));\r",
									"\r",
									"// pm.test(\"Status code be success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"pm.test(\"Status code is client error \", function () {\r",
									"    pm.response.to.have.clientError;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is valid\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql('keep-alive');\r",
									"});\r",
									"\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                    \"anyOf\" : [\r",
									"                        { \"type\": \"string\" },\r",
									"                        { \"type\": \"integer\" }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"company_id\": {{company_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "UserUpdateWithInvName",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Blez\",\r\n  \"last_name\": 123,\r\n  \"company_id\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/19530",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"19530"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 15 Aug 2023 15:05:28 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-do-app-origin",
									"value": "b0133268-2609-4f96-94a3-eb47a16061c4"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=3EK0Dk3I%2Bu40DU09by8sZStrW6GRpDHQ5GujUHQ324EucD69EPxUVQHGTMjijYyQ3vph7cyuD%2FN1Wz%2FJZTmMwvjvWMip8Aruy2Uqd8GXVFXuzc9lHgV3wrmk9veMNCAOHPg%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f725602a8764c87-HEL"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"first_name\": \"Blez\",\n    \"last_name\": \"123\",\n    \"company_id\": 1,\n    \"user_id\": 19530\n}"
						}
					]
				}
			]
		},
		{
			"name": "chk",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followRedirects": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/issues/companies?limit=-1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"issues",
						"companies"
					],
					"query": [
						{
							"key": "limit",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "first_name",
			"value": ""
		},
		{
			"key": "last_name ",
			"value": ""
		},
		{
			"key": "company_id",
			"value": ""
		},
		{
			"key": "last_name",
			"value": ""
		}
	]
}